////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "entity/Movement.hpp"
#include "entity/Entity.hpp"
#include "type/Vector2.hpp"
#include "util/debug.hpp"

#include <string_view>

namespace nemo::attr
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace
{
	const auto log_movement_ = 
		[] (const Entity& e, const int speed, const std::string_view& dir) {
		STDDEBUG(std::addressof(e) << " moved " << dir << " " << speed);
	};
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Movable::moveLeft(Entity& entity, const int speed)
const noexcept
{
	type::Vector2 position = entity.position();
	position._x -= type::x_t(speed);
	entity.setPosition(position);

	log_movement_(entity, speed, "left");
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Movable::moveUp(Entity& entity, const int speed)
const noexcept
{
	type::Vector2 position = entity.position();

	// Y = 0 is at the top of the window screen instead of the bottom, so 
	// subtract from the current y-cooordinate to move up.
	position._y -= type::y_t(speed);
	entity.setPosition(position);

	log_movement_(entity, speed, "up");
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Movable::moveRight(Entity& entity, const int speed)
const noexcept
{
	type::Vector2 position = entity.position();
	position._x += type::x_t(speed);
	entity.setPosition(position);

	log_movement_(entity, speed, "right");
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Movable::moveDown(Entity& entity, const int speed)
const noexcept
{
	type::Vector2 position = entity.position();

	// Y = 0 is at the top of the window screen instead of the bottom, so add 
	// to the current y-cooordinate to move down.
	position._y += type::y_t(speed);
	entity.setPosition(position);

	log_movement_(entity, speed, "down");
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Immovable::moveLeft(
	[[maybe_unused]] Entity&   entity, 
	[[maybe_unused]] const int speed
) const noexcept
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Immovable::moveUp(
	[[maybe_unused]] Entity&   entity, 
	[[maybe_unused]] const int speed
) const noexcept
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Immovable::moveRight(
	[[maybe_unused]] Entity&   entity, 
	[[maybe_unused]] const int speed
) const noexcept
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Immovable::moveDown(
	[[maybe_unused]] Entity&   entity, 
	[[maybe_unused]] const int speed
) const noexcept
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

}