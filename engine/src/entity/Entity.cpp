////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "entity/Entity.hpp"

#include <SFML/Graphics/Color.hpp>
#include <algorithm>
#include <utility>

namespace nemo
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Entity::Entity(
	std::unique_ptr< ai::EntityAI >&&         ai,
	std::unique_ptr< sprite::EntitySprite >&& sprite
)
{
	changeAI(std::move(ai));
	changeSprite(std::move(sprite));
	setMovability(std::make_unique< attr::Movable >());
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type::Vector2
Entity::position()
const noexcept
{
	return _position;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Entity::setPosition(const type::Vector2 position)
noexcept
{
	_position = position;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const attr::Movement&
Entity::movement()
const noexcept
{
	return *_movement;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Entity::setMovability(std::unique_ptr< attr::Movement >&& movement)
noexcept
{
	_movement = std::move(movement);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Entity::changeAI(std::unique_ptr< ai::EntityAI >&& ai)
{
	_ai = std::move(ai);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Entity::changeSprite(std::unique_ptr< sprite::EntitySprite >&& sprite)
{
	_sprite = std::move(sprite);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

attr::MovementSpeed
Entity::speed()
const noexcept
{
	return _speed;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Entity::updateObject(sf::RenderWindow& window)
{
	_ai->commitAction(*this);
	_sprite->displayEntity(window, *this);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} 