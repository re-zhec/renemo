////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "type/Vector2.hpp"

namespace nemo::type
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2::Vector2(const x_t x, const y_t y)
noexcept
	: _x(x)
	, _y(y) 
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2::Vector2(const xy_pair_t xy)
noexcept
	: _x(xy.first)
	, _y(xy.second) 
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2 
Vector2::operator + (const Vector2 rhs)
const noexcept
{
	return Vector2(_x + rhs._x, _y + rhs._y);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2&
Vector2::operator += (const Vector2 rhs) 
noexcept
{
	_x += rhs._x;
	_y += rhs._y;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2 
Vector2::operator - (const Vector2 rhs)
const noexcept 
{
	return { _x - rhs._x, _y - rhs._y };
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2&
Vector2::operator -= (const Vector2 rhs)
noexcept
{
	_x -= rhs._x;
	_y -= rhs._y;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template< typename T >
sf::Vector2< T >
Vector2::sfVector2()
const noexcept
{
	sf::Vector2< T > v;
	v.x = static_cast< T >(type_safe::get(_x));
	v.y = static_cast< T >(type_safe::get(_y));
	
	return v;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template sf::Vector2< int >      Vector2::sfVector2() const noexcept;
template sf::Vector2< float >    Vector2::sfVector2() const noexcept;
template sf::Vector2< unsigned > Vector2::sfVector2() const noexcept;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} 