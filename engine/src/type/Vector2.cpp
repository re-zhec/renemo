////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "type/Vector2.hpp"

namespace nemo::type
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2::Vector2(x_t x, y_t y)
noexcept
	: _x(x)
	, _y(y) 
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2 
Vector2::operator + (const Vector2 rhs)
const noexcept
{
	return Vector2(_x + rhs._x, _y + rhs._y);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2&
Vector2::operator += (const Vector2 rhs) 
noexcept
{
	_x += rhs._x;
	_y += rhs._y;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2 
Vector2::operator - (const Vector2 rhs)
const noexcept 
{
	return { _x - rhs._x, _y - rhs._y };
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2&
Vector2::operator -= (const Vector2 rhs)
noexcept
{
	_x -= rhs._x;
	_y -= rhs._y;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

sf::Vector2i
Vector2::sfVector2i()
const noexcept
{
	sf::Vector2i v;
	v.x = static_cast< int >(_x);
	v.y = static_cast< int >(_y);
	return v;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // namespace nemo::type