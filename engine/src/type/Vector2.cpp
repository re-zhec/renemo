////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "type/Vector2.hpp"

namespace nemo::type
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2::Vector2(x_t x, y_t y)
noexcept
	: _x(x), _y(y) 
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2 
Vector2::operator + (const Vector2 rhs)
const noexcept
{
	return Vector2(_x + rhs._x, _y + rhs._y);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2&
Vector2::operator += (const Vector2 rhs) 
noexcept
{
	_x += rhs._x;
	_y += rhs._y;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2 
Vector2::operator - (const Vector2 rhs)
const noexcept 
{
	return { _x - rhs._x, _y - rhs._y };
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Vector2&
Vector2::operator -= (const Vector2 rhs)
noexcept
{
	_x -= rhs._x;
	_y -= rhs._y;
	return *this;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template< typename T >
sf::Vector2< T >
Vector2::sfVector2()
const noexcept
{
	namespace ts = type_safe::strong_typedef_op::detail;
	const auto x = static_cast< decltype(ts::get_underlying(_x)) >(_x);
	const auto y = static_cast< decltype(ts::get_underlying(_y)) >(_y);
	return { static_cast< T >(x), static_cast< T >(y) };
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template sf::Vector2< int >   Vector2::sfVector2< int >()   const noexcept;
template sf::Vector2< float > Vector2::sfVector2< float >() const noexcept;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // namespace nemo::type