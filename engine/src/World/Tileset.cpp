////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "World/Tileset.hpp"
#include "type/RowColumnIndex.hpp"
#include "constants.hpp"

#include <sstream>
#include <algorithm>
#include <exception>

namespace nemo
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace {
	// Default path to a tileset directory.
	const std::filesystem::path tileset_dir_ = constants::_sprite_dir /
		"tileset";
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Tileset::Tileset(const std::filesystem::path& file)
	: _tile_side_length(constants::_tile_side_length)
{
	if (!_texture.loadFromFile(file.string())) {
		std::stringstream err_msg;
		err_msg << "Failed to load texture from " << file;
		throw std::ios_base::failure(err_msg.str());
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Tileset::setTilePixelSize(const int length)
{
	_tile_side_length = length;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

sf::Sprite
Tileset::getTileSprite(const type::RowColumnIndex rc)
const
{
	const sf::Vector2i top_left = rc.sfVector2i() * _tile_side_length;
	const sf::Vector2i size = { _tile_side_length, _tile_side_length };
	
	const sf::IntRect portion_to_crop(top_left, size);
	return sf::Sprite(_texture, portion_to_crop);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

UrbanTilemap::UrbanTilemap()
	: Tileset("urban.png")
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

ForestTilemap::ForestTilemap()
	: Tileset("forest.png")
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

std::unique_ptr< Tileset >
makeTileset(const std::string_view& type)
{
	if (type == "urban") {
		return std::make_unique< UrbanTilemap >();
	}
	else if (type == "forest") {
		return std::make_unique< ForestTilemap >();
	}

	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // namespace nemo