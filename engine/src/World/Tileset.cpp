////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "World/Tileset.hpp"
#include "type/Vector2.hpp"
#include "GameRoot.hpp"

#include <sstream>
#include <algorithm>
#include <exception>

#include <boost/filesystem.hpp>

namespace nemo
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Tileset::Tileset(boost::filesystem::path tilemap_file)
{
	tilemap_file = boost::filesystem::absolute(tilemap_file, getTilesetDir());

	if (!_texture.loadFromFile(tilemap_file.string())) {
		std::stringstream err_msg;
		err_msg << "Failed to load texture from " << tilemap_file;
		throw std::ios_base::failure(err_msg.str());
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

sf::Sprite
Tileset::getSprite(const type::Vector2 idx)
const
{
	constexpr auto pixels_per_unit = 16;
	
	const sf::IntRect portion_to_crop(
		idx.sfVector2< int >() * pixels_per_unit, 
		{ pixels_per_unit, pixels_per_unit }
	);

	return sf::Sprite(_texture, portion_to_crop);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

boost::filesystem::path
Tileset::getTilesetDir()
{
	return GameRoot::getSpriteDir() / "tileset";
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

UrbanTilemap::UrbanTilemap()
	: Tileset("urban.png")
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

ForestTilemap::ForestTilemap()
	: Tileset("forest.png")
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

std::unique_ptr< Tileset >
makeTileset(const TilesetType type)
{
	switch (type) {
		case TilesetType::Urban:
		return std::make_unique< UrbanTilemap >();

		case TilesetType::Forest:
		return std::make_unique< ForestTilemap >();
	}

	return nullptr;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // namespace nemo