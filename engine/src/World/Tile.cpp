////////////////////////////////////////////////////////////////////////////////
/// \copyright MIT License                                                   ///
/// \author    Caylen Lee                                                    ///
/// \date      2019                                                          ///
////////////////////////////////////////////////////////////////////////////////
#include "World/Tile.hpp"
#include "World/Tileset.hpp"
#include "type/RowColumnIndex.hpp"

#include <algorithm>

namespace nemo
{

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Tile::Tile(std::vector< type::RowColumnIndex > tile_indices)
	: _tile_indices(tile_indices)
{
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Tile::addTileIndex(const type::RowColumnIndex tile_idx)
{
	_tile_indices.push_back(tile_idx);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Tile::allowWalk(const bool walkable)
noexcept
{
	_is_walkable = walkable;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

bool
Tile::isWalkable()
const noexcept
{
	return _is_walkable;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

void
Tile::drawSprite(
	sf::RenderWindow&   window, 
	const Tileset&      tileset
) const
{
	for (const type::RowColumnIndex idx : _tile_indices) {
		window.draw( tileset.getTileSprite(idx) );
	}
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // namespace nemo